# Override the port Tomcat listens on
server:
  port: 9080

# Another implementation of getObservablePrimes() above that's causing Http response 503
# org.springframework.web.context.request.async.AsyncRequestTimeoutException
# https://stackoverflow.com/questions/39856198/recurring-asyncrequesttimeoutexception-in-spring-boot-admin-log
# https://stackoverflow.com/questions/53650303/spring-boot-timeout-when-using-futures/53652640
spring:
  mvc:
    async:
      request-timeout: -1

# NOTE: Using embedded MongoDB with flapdoodle for Reactive Mongo simulation
# See `readme.md` about the 2 ways of simulating Reactive Mongo using installed MongoDB vs embedded MongoDB with flapdoodle
#  data:
#    mongodb:
#      authentication-database: admin
#      host: localhost
#      port: 27017
#      username: test
#      password: password
#      database: test

# NOTE: Using H2 blocking DB to simulate access with Reactor Flux/Mono to be non-blocking IO
  datasource:
    url: jdbc:h2:file:~/Documents/h2TestDB
    driverClassName: org.h2.Driver
    username: sa
    password:
    hikari:
      maximum-pool-size: 100
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
  #    ddl-auto: update
  #    show_sql: true
  #
  # http://localhost:9080/h2-console
  h2:
    console:
      enabled: true
  #
  # spring.cloud.stream.bindings.input.destination. Normally, when using RabbitMQ, each instance of comments
  # will register its own queue, and hence, receive its own copy of newly posted comments. This would
  # result in double posting in this scenario. This will declare that only one such queue should receive each individual
  # message. This ensures that only one of the micro services actually processes a given event
  #
  # spring.cloud.stream.bindings.output.destination points to a different exchange to avoid colliding with
  # the one feeding messages into this service
  #
  # spring.cloud.stream.bindings.output.group provides a logical grouping to ensure proper handling if we
  # ever scale up to more than one instance of comments service
  #
  # spring.cloud.stream.bindings.output.content-type is marked application/json , indicating we don't expect
  # the consumer to use the same domain class, but will probably deserialize into their own POJO instead
  cloud:
    stream:
      bindings:
        input:
          destination: exploring-spring-cloud-stream-chat
          group: comments-chat
          content-type: application/json
        clientToBroker:
          destination: exploring-spring-cloud-stream-chat-user-message
          group: app-chatMessages
        brokerToClient:
          destination: exploring-spring-cloud-stream-chat-user-message
          group: topic-chatMessages

# Customize log levels
logging:
  level:
    reactor:
      core: TRACE
      util: TRACE
    org:
#      springframework.data: INFO
    io:
      netty: DEBUG
      reactor: DEBUG
    com:
      giocosmiano: DEBUG

# https://stackabuse.com/password-encoding-with-spring-security/
# https://www.veracode.com/blog/research/encryption-and-decryption-java-cryptography
pwd-encoder:
  secret-key: ThisIsAVeryLongSecretKey1234$!!!
  iteration: 65536
  hash-width: 256
  salt-length: 16

# JWT secret key
jwtSecretKey: ThisIsAVeryLongSecretKey1234$!!!


# enable actuator endpoints
#endpoints.autoconfig.enabled=true
#endpoints.beans.enabled=true
#endpoints.configprops.enabled=true
#endpoints.env.enabled=true
#endpoints.health.enabled=true
#endpoints.info.enabled=true
#endpoints.metrics.enabled=true
#endpoints.mappings.enabled=true
#endpoints.trace.enabled=true
